<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:wgpoi="http://www.webgate.biz/xsp/poi"
	xmlns:xe="http://www.ibm.com/xsp/coreex" xmlns:xc="http://www.ibm.com/xsp/custom">
	<xc:ccApplication pageTitle="Generate a Contract document"
		navigationPath="/docx/generatebyInput">
		<xp:this.facets>
			<xp:panel xp:key="facetRight">
				<xe:restService id="restDoc" pathInfo="docdownload">
					<xe:this.service>
						<xe:customRestService contentType="application/octet-stream"
							contentDisposition="poiContract.docx">
							<xe:this.doGet><![CDATA[#{javascript:var template = poiBean.buildResourceTemplateSource(null,"SampleContract.docx");
var lstBM = new java.util.ArrayList();
lstBM.add(poiBean.buildDocumentBookmark("name", sessionScope.name));
lstBM.add(poiBean.buildDocumentBookmark("address", sessionScope.address));
lstBM.add(poiBean.buildDocumentBookmark("zip", sessionScope.zip));
lstBM.add(poiBean.buildDocumentBookmark("location", sessionScope.location));
lstBM.add(poiBean.buildDocumentBookmark("e-mail", sessionScope.email));
var result = poiBean.processDocument2Stream(template, lstBM);
if (result == null) {
	print("?????");
}
return new java.io.ByteArrayInputStream(result.toByteArray())}]]></xe:this.doGet>
						</xe:customRestService>
					</xe:this.service>
				</xe:restService>

				<xp:button value="download" id="button1">

					<xp:eventHandler event="onclick" submit="true"
						refreshMode="complete">
						<xp:this.action><![CDATA[#{javascript:print(viewScope.name);
viewScope.name= "DÃ¤ Guede";
facesContext.getExternalContext().getResponse().sendRedirect(@FullUrl("docx_poi.xsp/docdownload/poiContract.docx"))
}]]></xp:this.action>
					</xp:eventHandler>
				</xp:button>
			</xp:panel>
			<xp:panel xp:key="facetMiddle">
				This sample shows how values from a form directly can be directly inserted into
				a word document.
				<xp:span style="font-weight:bold">But this time we are going to use the poiBean to
					generate the output document with Java. So Code in Java can now also generate
					documents</xp:span>
				<xp:br></xp:br>
				<xp:br></xp:br>Fill
				out this form and click on &quot;download&quot; button on the
				right. Choose a viewer of your choice&#160; (like word) to
				inspect the result.
				<xp:br></xp:br>
				<xp:table>
					<xp:tr>
						<xp:td>Name</xp:td>
						<xp:td>
							<xp:inputText id="inputText1" value="#{sessionScope.name}">
							</xp:inputText>
						</xp:td>
					</xp:tr>
					<xp:tr>
						<xp:td>Address</xp:td>
						<xp:td>
							<xp:inputText id="inputText2" value="#{sessionScope.address}">
							</xp:inputText>
						</xp:td>
					</xp:tr>
					<xp:tr>
						<xp:td>ZIP</xp:td>
						<xp:td>
							<xp:inputText id="inputText3" value="#{sessionScope.zip}">
							</xp:inputText>
						</xp:td>
					</xp:tr>
					<xp:tr>
						<xp:td>Location</xp:td>
						<xp:td>
							<xp:inputText id="inputText4" value="#{sessionScope.location}">
							</xp:inputText>
						</xp:td>
					</xp:tr>
					<xp:tr>
						<xp:td>E-Mail</xp:td>
						<xp:td>
							<xp:inputText id="inputText5" value="#{sessionScope.email}">
							</xp:inputText>
						</xp:td>
					</xp:tr>

				</xp:table>
				<xp:br></xp:br>
				<xp:section id="section1" header="Programming documentation"
					initClosed="true">
					We use the SampleContract.docx (under Resources/Files) as a template for this
					output. The File looks like this:
					<xp:br></xp:br>
					<xp:image id="image1">
						<xp:this.url><![CDATA[#{javascript:"Word_Sample.png"}]]></xp:this.url>
					</xp:image>
					<xp:br></xp:br>
					<xp:br></xp:br>In
					the XPage the &quot;POI Document&quot; control is used. All
					input fields are wired to
					<xp:span style="font-weight:bold">sessionScope</xp:span>
					variables and the rest-service on the doGet() - Event. The following
					code builds the document:
					<xp:br></xp:br>
					<xp:br></xp:br>
					<xp:image id="image2">
						<xp:this.url><![CDATA[#{javascript:"Word_poi_Sample_programming.png"}]]></xp:this.url>
					</xp:image>
				</xp:section>
			</xp:panel>
			<xc:ccNavDocX xp:key="facetLeft"></xc:ccNavDocX>
		</xp:this.facets>
	</xc:ccApplication>

</xp:view>
